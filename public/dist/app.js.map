{"version":3,"file":"app.js","mappings":";;;;;;;;;;;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;;;;ACHA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA9CA;;;;;;;;;;;;;ACFA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;;;;;;;ACFA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA","sources":["webpack://claserre9.github.io/./src/components/AppViewModel.ts","webpack://claserre9.github.io/./src/components/BaseViewModel.ts","webpack://claserre9.github.io/./src/components/NotFoundViewModel.ts","webpack://claserre9.github.io/./src/index.ts"],"sourcesContent":["import BaseViewModel from \"./BaseViewModel\";\nimport { computed, observable } from \"knockout\";\n\nexport default class AppViewModel extends BaseViewModel {\n  constructor() {\n    super();\n    this.template = `<h1>My Resume</h1>`;\n  }\n}\n","import { applyBindings, cleanNode, dataFor } from \"knockout\";\n\nexport default class BaseViewModel {\n  public template: string | undefined | null;\n  public context: any;\n  public selector: any;\n\n  public render(selector: string = \"app\"): this {\n    this.selector = selector;\n    this.load(selector);\n    return this;\n  }\n\n  public destroy() {\n    const element = document.getElementById(this.selector);\n    if (element) {\n      cleanNode(element);\n      while (element.firstChild) {\n        element.removeChild(element.firstChild);\n      }\n    } else {\n      console.error(`Element with id \"${this.selector}\" not found.`);\n    }\n  }\n\n  public setContext(context: any): this {\n    this.context = context;\n    return this;\n  }\n\n  public observableFrom(selector: string) {\n    const element = document.getElementById(selector);\n    if (!element) {\n      return null;\n    }\n    return dataFor(element);\n  }\n\n  private load(selector: string): void {\n    const container = document.getElementById(selector);\n    if (container && typeof this.template === \"string\") {\n      container.innerHTML = this.template;\n      cleanNode(container);\n      applyBindings(this, container);\n    } else {\n      console.error(`Element with id \"${selector}\" not found.`);\n    }\n  }\n}\n","import BaseViewModel from \"./BaseViewModel\";\n\nexport default class NotFoundViewModel extends BaseViewModel {\n  constructor() {\n    super();\n    this.template = `<h1>Not found</h1>`;\n  }\n}\n","import page from \"page\";\nimport AppViewModel from \"./components/AppViewModel\";\nimport NotFoundViewModel from \"./components/NotFoundViewModel\";\n\n// Dynamically set the base URL for file:// protocol\nconst isFileProtocol = window.location.protocol === \"file:\";\nif (isFileProtocol) {\n  const base = window.location.pathname.replace(/\\/index.html$/, \"\");\n  page.base(base);\n}\n\n// Middleware\npage(\"*\", function (ctx, next) {\n  console.log(\"Middleware executed on route:\", ctx.path);\n  next();\n});\n\n// Define the routes\npage(\"/\", function () {\n  new AppViewModel().render();\n});\n\npage(\"*\", function () {\n  new NotFoundViewModel().render();\n});\n\n// Initialize routing\npage();\n"],"names":[],"sourceRoot":""}